{"version":3,"sources":["webpack:///webpack/bootstrap 4add453c6820d2e4f3b2","webpack:///./source/js/wp-taxonomy-import.js","webpack:///./source/js/modules/no-jquery/index.js","webpack:///./source/js/modules/rest-api-request/index.js","webpack:///./~/whatwg-fetch/fetch.js"],"names":["form","document","querySelector","importToField","importFromField","button","addEventListener","taxonomyBase","value","remoteRest","method","alert","termsByParent","termParentMap","url","window","URL","searchParams","set","page","totalPages","simplifyTerms","terms","parent","simpleTerms","forEach","term","data","id","name","slug","push","ajaxInsertTerms","length","ajaxurl","_nonce","taxonomyImport","ajaxNonce","action","taxonomy","JSON","stringify","then","response","json","Object","keys","map","k","parseInt","requestTerms","pageNum","toString","status","headers","get","Array","isArray","console","log","ready","fn","attachEvent","readyState","GET","POST","doFetch","request","fetch","contentType","includes","TypeError","nonce","query","join","Headers","Request","credentials","body","FormData","append"],"mappings":"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ACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAgB;AAChB;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,QAAO;AACP,MAAK;AACL;AACA;AACA,QAAO;AACP,MAAK;AACL;AACA;AACA,QAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,yCAAwC,mBAAmB;AAC3D;AACA;;AAEA;AACA;AACA,mCAAkC,oBAAoB;AACtD;AACA;;AAEA;AACA;AACA,yCAAwC,4BAA4B;AACpE;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,oBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA,QAAO;AACP;AACA,QAAO;AACP;AACA,QAAO;AACP;AACA,QAAO;AACP;AACA;AACA;AACA,QAAO;AACP;AACA,QAAO;AACP;AACA;;AAEA;AACA;AACA,wDAAuD;AACvD,UAAS;AACT;AACA,UAAS;AACT,+EAA8E;AAC9E;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAS;AACT;AACA,UAAS;AACT;AACA,UAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA,UAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,QAAO;AACP;AACA,QAAO;AACP;AACA,QAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,+BAA8B,uBAAuB;AACrD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA,wCAAuC,0BAA0B;AACjE;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA,gCAA+B,0BAA0B,eAAe;AACxE;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,QAAO;;AAEP;AACA,MAAK;AACL;AACA;AACA,EAAC","file":"assets/js/wp-taxonomy-import.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 4add453c6820d2e4f3b2","import {ready} from 'no-jquery';\nimport {GET, POST} from 'rest-api-request';\n\nready(() => {\n\n    const form = document.querySelector('.taxonomy-import-form');\n\n    if (form) {\n        const importToField = form.querySelector('[name=\"_taxonomy_import_to\"]');\n        const importFromField = form.querySelector('[name=\"_taxonomy_import_rest_url\"]');\n        const button = form.querySelector('button');\n\n        button.addEventListener('click', () => {\n            const taxonomyBase = importToField.value;\n            const remoteRest = importFromField.value;\n            const method = form.querySelector('input[name=\"_taxonomy_import_use_ajax\"]').value === '' ? 'rest' : 'ajax';\n\n            if (!taxonomyBase || !remoteRest) {\n                alert('A required field was left empty!');\n                return;\n            }\n\n            const termsByParent = [];\n            const termParentMap = [];\n            const url = new window.URL(remoteRest);\n            url.searchParams.set('per_page', '100');\n\n            let page = 1;\n            let totalPages = 0;\n\n            const simplifyTerms = (terms, parent) => {\n                const simpleTerms = [];\n                terms.forEach((term) => {\n                    const data = {\n                        id: term.id,\n                        name: term.name,\n                        slug: term.slug,\n                        parent: 0,\n                    };\n                    if (0 < parent && termParentMap[parent]) {\n                        data.parent = termParentMap[parent];\n                    }\n                    simpleTerms.push(data);\n                });\n\n                return simpleTerms;\n            };\n\n            const ajaxInsertTerms = (parent = 0) => {\n                if (termsByParent[parent] && termsByParent[parent].length) {\n                    POST(window.ajaxurl, {\n                        _nonce: window.taxonomyImport.ajaxNonce,\n                        action: 'dfwood_wp_taxonomy_import',\n                        taxonomy: taxonomyBase,\n                        terms: JSON.stringify(simplifyTerms(termsByParent[parent], parent)),\n                    }, window.taxonomyImport.ajaxNonce)\n                        .then((response) => {\n                            response.json().then((json) => {\n                                if (json.terms) {\n                                    Object.keys(json.terms).map((k) => {\n                                        const id = parseInt(k, 10);\n                                        termParentMap[id] = json.terms[k];\n                                        if (termsByParent[id] && termsByParent[id].length) {\n                                            ajaxInsertTerms(id);\n                                        }\n                                    });\n                                }\n                            });\n                        });\n                }\n            };\n\n            /*const insertTerms = (parent = 0) => {\n                termsByParent[parent].forEach((term) => {\n                    const data = {\n                        name: term.name,\n                    };\n                    if (0 !== parent && 0 < termParentMap[parent]) {\n                        data.parent = termParentMap[parent];\n                    }\n                    POST(`${window.taxonomyImport.restApi}${taxonomyBase}`, data, window.taxonomyImport.restNonce)\n                        .then((response) => {\n                            response.json().then((json) => {\n                                console.log(json);\n                                if (json.code && json.code === 'term_exists') {\n                                } else {\n                                    termParentMap[term.id] = json.id;\n                                    if (termsByParent[term.id] && termsByParent[term.id].length) {\n                                        insertTerms(term.id);\n                                    }\n                                }\n                            });\n                        });\n                });\n            };*/\n\n            const requestTerms = (pageNum) => {\n                url.searchParams.set('page', `${pageNum}`);\n\n                GET(url.toString())\n                    .then((response) => {\n                        response.json().then((json) => {\n                            page++;\n                            if (200 === response.status) {\n                                totalPages = response.headers.get('X-WP-Totalpages');\n                            }\n                            if (Array.isArray(json)) {\n                                console.log(json);\n                                json.forEach((term) => {\n                                    if (!termsByParent[term.parent]) {\n                                        termsByParent[term.parent] = [];\n                                    }\n                                    termsByParent[term.parent].push(term);\n                                });\n                            }\n                            if (totalPages >= page) {\n                                requestTerms(page);\n                            } else {\n                                // TODO: Consider re-implementing REST API insertion?\n                                // if ('ajax' === method) {\n                                ajaxInsertTerms();\n                                // } else {\n                                //    insertTerms();\n                                // }\n                            }\n                        });\n                    });\n            };\n\n            requestTerms(page);\n        });\n    }\n\n});\n\n\n\n// WEBPACK FOOTER //\n// ./source/js/wp-taxonomy-import.js","export function ready(fn) {\n    if (document.attachEvent ? document.readyState === 'complete' : document.readyState !== 'loading') {\n        fn();\n    } else {\n        document.addEventListener('DOMContentLoaded', fn);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./source/js/modules/no-jquery/index.js","import 'whatwg-fetch';\n\nfunction doFetch(request) {\n    // Make our fetch request.\n    return fetch(request).then(response => {\n        // Verify returned content type and setup response.\n        const contentType = response.headers.get('content-type');\n        if (contentType && contentType.includes('application/json')) {\n            return response;\n        }\n        // Invalid content received!\n        throw new TypeError(`ERROR: Expected JSON response, received '${contentType}' instead!`);\n    });\n}\n\nexport function GET(url, data = {}, nonce = '') {\n    let query = [];\n    Object.keys(data).map(k => query.push(`${k}=${data[k]}`));\n\n    url += url.includes('?') ? `&${query.join('&')}` : `?${query.join('&')}`;\n\n    const headers = new Headers();\n    if (nonce) {\n        headers.set('X-WP-Nonce', nonce);\n    }\n\n    const request = new Request(url, {\n        credentials: 'same-origin',\n        headers,\n        method: 'GET',\n    });\n\n    return doFetch(request);\n}\n\nexport function POST(url, data = {}, nonce = '') {\n    // Set data as body content\n    const body = new FormData();\n    Object.keys(data).map(k => body.append(k, data[k]));\n\n    // Create request\n    const request = new Request(url, {\n        credentials: 'same-origin',\n        body,\n        headers: new Headers({\n            'X-WP-Nonce': nonce,\n        }),\n        method: 'POST',\n    });\n\n    return doFetch(request);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./source/js/modules/rest-api-request/index.js","(function(self) {\n  'use strict';\n\n  if (self.fetch) {\n    return\n  }\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob: 'FileReader' in self && 'Blob' in self && (function() {\n      try {\n        new Blob()\n        return true\n      } catch(e) {\n        return false\n      }\n    })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ]\n\n    var isDataView = function(obj) {\n      return obj && DataView.prototype.isPrototypeOf(obj)\n    }\n\n    var isArrayBufferView = ArrayBuffer.isView || function(obj) {\n      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n    }\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name)\n    }\n    if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value)\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift()\n        return {done: value === undefined, value: value}\n      }\n    }\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      }\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {}\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value)\n      }, this)\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1])\n      }, this)\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name])\n      }, this)\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name)\n    value = normalizeValue(value)\n    var oldValue = this.map[name]\n    this.map[name] = oldValue ? oldValue+','+value : value\n  }\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)]\n  }\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name)\n    return this.has(name) ? this.map[name] : null\n  }\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  }\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value)\n  }\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this)\n      }\n    }\n  }\n\n  Headers.prototype.keys = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push(name) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.values = function() {\n    var items = []\n    this.forEach(function(value) { items.push(value) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.entries = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push([name, value]) })\n    return iteratorFor(items)\n  }\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result)\n      }\n      reader.onerror = function() {\n        reject(reader.error)\n      }\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsArrayBuffer(blob)\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsText(blob)\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf)\n    var chars = new Array(view.length)\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i])\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength)\n      view.set(new Uint8Array(buf))\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false\n\n    this._initBody = function(body) {\n      this._bodyInit = body\n      if (!body) {\n        this._bodyText = ''\n      } else if (typeof body === 'string') {\n        this._bodyText = body\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString()\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer)\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer])\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body)\n      } else {\n        throw new Error('unsupported BodyInit type')\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8')\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type)\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n        }\n      }\n    }\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this)\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      }\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      }\n    }\n\n    this.text = function() {\n      var rejected = consumed(this)\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    }\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      }\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    }\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase()\n    return (methods.indexOf(upcased) > -1) ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {}\n    var body = options.body\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url\n      this.credentials = input.credentials\n      if (!options.headers) {\n        this.headers = new Headers(input.headers)\n      }\n      this.method = input.method\n      this.mode = input.mode\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit\n        input.bodyUsed = true\n      }\n    } else {\n      this.url = String(input)\n    }\n\n    this.credentials = options.credentials || this.credentials || 'omit'\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers)\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET')\n    this.mode = options.mode || this.mode || null\n    this.referrer = null\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body)\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, { body: this._bodyInit })\n  }\n\n  function decode(body) {\n    var form = new FormData()\n    body.trim().split('&').forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=')\n        var name = split.shift().replace(/\\+/g, ' ')\n        var value = split.join('=').replace(/\\+/g, ' ')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers()\n    rawHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':')\n      var key = parts.shift().trim()\n      if (key) {\n        var value = parts.join(':').trim()\n        headers.append(key, value)\n      }\n    })\n    return headers\n  }\n\n  Body.call(Request.prototype)\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {}\n    }\n\n    this.type = 'default'\n    this.status = 'status' in options ? options.status : 200\n    this.ok = this.status >= 200 && this.status < 300\n    this.statusText = 'statusText' in options ? options.statusText : 'OK'\n    this.headers = new Headers(options.headers)\n    this.url = options.url || ''\n    this._initBody(bodyInit)\n  }\n\n  Body.call(Response.prototype)\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  }\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''})\n    response.type = 'error'\n    return response\n  }\n\n  var redirectStatuses = [301, 302, 303, 307, 308]\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  }\n\n  self.Headers = Headers\n  self.Request = Request\n  self.Response = Response\n\n  self.fetch = function(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init)\n      var xhr = new XMLHttpRequest()\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        }\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')\n        var body = 'response' in xhr ? xhr.response : xhr.responseText\n        resolve(new Response(body, options))\n      }\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.open(request.method, request.url, true)\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob'\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value)\n      })\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n    })\n  }\n  self.fetch.polyfill = true\n})(typeof self !== 'undefined' ? self : this);\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/whatwg-fetch/fetch.js\n// module id = 4\n// module chunks = 0"],"sourceRoot":""}